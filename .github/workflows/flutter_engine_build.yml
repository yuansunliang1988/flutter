name: Build Flutter Windows Engine

on:
  push:
    branches:
      - master  # 触发构建的分支
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest  # 使用 GitHub 提供的 Windows 环境

    steps:
      # 1. 检出代码
      - name: Checkout Flutter
        uses: actions/checkout@v4
        with:
          submodules: true  # 确保子模块也被拉取

      # 2. 安装 Python 3.x（如果未预装）
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # 3. 缓存 depot_tools
      - name: Cache depot_tools
        id: cache-depot_tools
        uses: actions/cache@v4
        with:
          path: depot_tools
          key: depot_tools-${{ runner.os }}

      # 4. 安装 depot_tools（Flutter 构建依赖）
      - name: Install depot_tools
        if: steps.cache-depot_tools.outputs.cache-hit != 'true'
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        env:
          DEPOT_TOOLS_PATH: ${{ github.workspace }}/depot_tools

      # 5. 设置 depot_tools PATH
      - name: Setup depot_tools PATH
        run: |
          echo "${{ github.workspace }}/depot_tools" >> $env:GITHUB_PATH

      # 6. 缓存 Flutter engine
      - name: Cache Flutter engine
        id: cache-flutter-engine
        uses: actions/cache@v4
        with:
          path: engine
          key: flutter-engine-${{ runner.os }}-${{ hashFiles('**/DEPS') }}

      # 7. 使用 GitHub Actions 预装的 Visual Studio（推荐）
      - name: Setup Visual Studio
        uses: microsoft/setup-msbuild@v1.1

      # 8. 安装 Dart SDK
      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      # 9. 安装 Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # 10. 配置 Git 全局设置
      - name: Configure Git
        run: |
          git config --global core.autocrlf false
          git config --global core.filemode false
          git config --global core.fscache true
          git config --global core.preloadindex true
          
      # 10.5. 验证代码完整性
      - name: Verify Code Integrity
        run: |
            Write-Host "=== 验证代码完整性 ==="
            
            # 检查当前提交
            Write-Host "当前提交:"
            git log --oneline -1
            
            # 检查工作目录状态
            Write-Host "工作目录状态:"
            git status --porcelain
            
            # 验证子模块
            Write-Host "子模块状态:"
            git submodule status
            
            # 检查关键文件是否存在
            Write-Host "检查关键文件:"
            $criticalFiles = @(
              "engine/README.md",
              "engine/.gclient"
            )
            
            $missingFiles = @()
            foreach ($file in $criticalFiles) {
              if (Test-Path $file) {
                Write-Host "? $file 存在"
              } else {
                Write-Host "? $file 缺失"
                $missingFiles += $file
              }
            }
            
            # 验证engine目录结构
            Write-Host "Engine目录结构验证:"
            if (Test-Path "engine") {
              Get-ChildItem engine | ForEach-Object { Write-Host "  - $($_.Name)" }
            } else {
              Write-Host "? engine目录不存在"
              $missingFiles += "engine目录"
            }
            
            # 如果有缺失文件，输出警告但不退出
            if ($missingFiles.Count -gt 0) {
              Write-Host "??  发现缺失文件，将在后续步骤中尝试修复:"
              $missingFiles | ForEach-Object { Write-Host "  - $_" }
            } else {
              Write-Host "? 所有关键文件都存在"
            }

      # 11. 同步 Flutter 引擎代码
      - name: Sync Flutter Engine
        if: steps.cache-flutter-engine.outputs.cache-hit != 'true'
        run: |
          cd engine
          gclient config https://github.com/flutter/flutter.git
          gclient sync --nohooks
          
      # 11.5. 强制同步（确保buildtools下载）
      - name: Force Sync Buildtools
        run: |
          cd engine
          gclient sync --nohooks --force
          
      # 11.6. 验证同步结果
      - name: Verify Sync Results
        run: |
            cd engine
            Write-Host "=== 验证同步结果 ==="
            
            # 检查.gclient_entries文件
            if (Test-Path ".gclient_entries") {
              Write-Host "? .gclient_entries 存在"
              Get-Content ".gclient_entries" | Select-Object -First 5
            } else {
              Write-Host "? .gclient_entries 缺失"
              Write-Host "??  尝试重新同步..."
              gclient sync --nohooks --force
            }
            
            # 验证flutter目录完整性
            if (Test-Path "flutter") {
              Write-Host "? flutter目录存在"
              
              # 检查buildtools
              if (Test-Path "flutter\buildtools") {
                Write-Host "? buildtools目录存在"
                Get-ChildItem "flutter\buildtools" -Recurse | Select-Object -First 10
              } else {
                Write-Host "? buildtools目录缺失"
                Write-Host "??  尝试重新同步buildtools..."
                gclient sync --nohooks --force
              }
            } else {
              Write-Host "? flutter目录缺失"
              Write-Host "??  尝试重新同步..."
              gclient sync --nohooks --force
            }
            
            # 检查关键源文件
            $sourceFiles = @(
              "src\flutter\shell\platform\windows\flutter_windows_engine.cc",
              "src\flutter\shell\platform\windows\egl\manager.cc",
              "src\flutter\shell\platform\windows\egl\manager.h"
            )
            
            $missingSourceFiles = @()
            foreach ($file in $sourceFiles) {
              if (Test-Path $file) {
                Write-Host "? $file 存在"
              } else {
                Write-Host "? $file 缺失"
                $missingSourceFiles += $file
              }
            }
            
            # 如果有缺失的源文件，输出警告但不退出
            if ($missingSourceFiles.Count -gt 0) {
              Write-Host "??  发现缺失的源文件:"
              $missingSourceFiles | ForEach-Object { Write-Host "  - $_" }
              Write-Host "这些文件可能在后续构建步骤中生成"
            }

      # 12. 检查目录结构
      - name: Check directory structure
        run: |
          cd engine
          Write-Host "=== Engine directory contents ==="
          Get-ChildItem
          
          Write-Host "=== Flutter directory contents ==="
          if (Test-Path "flutter") {
            Get-ChildItem flutter
          } else {
            Write-Host "flutter directory not found"
          }
          
          Write-Host "=== Search for buildtools ==="
          Get-ChildItem -Recurse -Directory -Name "buildtools" | Select-Object -First 10
          
          Write-Host "=== Search for gn.exe ==="
          Get-ChildItem -Recurse -File -Name "gn.exe" | Select-Object -First 10
          
          Write-Host "=== Search for ninja.exe ==="
          Get-ChildItem -Recurse -File -Name "ninja.exe" | Select-Object -First 10

      # 13. 生成构建配置（GN）
      - name: Generate GN Build Files
        run: |
          cd engine
          
          # 尝试找到gn.exe
          $gnPath = $null
          if (Test-Path "flutter\buildtools\win\gn.exe") {
            $gnPath = ".\flutter\buildtools\win\gn.exe"
          } else {
            $gnFiles = Get-ChildItem -Recurse -File -Name "gn.exe" | Select-Object -First 1
            if ($gnFiles) {
              $gnPath = $gnFiles
            }
          }
          
          if ($gnPath) {
            Write-Host "Using gn at: $gnPath"
            & $gnPath gen out\host_release --args="target_cpu=\"x64\" is_debug=false is_official_build=true is_component_build=false enable_impeller=true"
          } else {
            Write-Host "gn.exe not found anywhere in the engine directory"
            Write-Host "??  尝试重新同步以获取buildtools..."
            gclient sync --nohooks --force
            
            # 再次尝试查找gn.exe
            if (Test-Path "flutter\buildtools\win\gn.exe") {
              Write-Host "? 重新同步后找到gn.exe"
              & ".\flutter\buildtools\win\gn.exe" gen out\host_release --args="target_cpu=\"x64\" is_debug=false is_official_build=true is_component_build=false enable_impeller=true"
            } else {
              Write-Host "? 重新同步后仍未找到gn.exe"
              exit 1
            }
          }

      # 14. 编译 Flutter Windows 引擎
      - name: Build Flutter Windows Engine
        run: |
          cd engine
          
          # 尝试找到ninja.exe
          $ninjaPath = $null
          if (Test-Path "flutter\buildtools\win\ninja.exe") {
            $ninjaPath = ".\flutter\buildtools\win\ninja.exe"
          } else {
            $ninjaFiles = Get-ChildItem -Recurse -File -Name "ninja.exe" | Select-Object -First 1
            if ($ninjaFiles) {
              $ninjaPath = $ninjaFiles
            }
          }
          
          if ($ninjaPath) {
            Write-Host "Using ninja at: $ninjaPath"
            & $ninjaPath -C out\host_release
          } else {
            Write-Host "ninja.exe not found anywhere in the engine directory"
            Write-Host "??  尝试重新同步以获取buildtools..."
            gclient sync --nohooks --force
            
            # 再次尝试查找ninja.exe
            if (Test-Path "flutter\buildtools\win\ninja.exe") {
              Write-Host "? 重新同步后找到ninja.exe"
              & ".\flutter\buildtools\win\ninja.exe" -C out\host_release
            } else {
              Write-Host "? 重新同步后仍未找到ninja.exe"
              exit 1
            }
          }

      # 15. 上传构建产物（flutter_engine.dll, lib, pdb）
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter_engine_windows_release
          path: |
            engine/out/host_release/flutter_engine.dll
            engine/out/host_release/flutter_engine.lib
            engine/out/host_release/flutter_engine.pdb